<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classargparser_1_1varg" kind="class" language="C++" prot="public">
    <compoundname>argparser::varg</compoundname>
    <basecompoundref refid="classargparser_1_1varg__intf" prot="public" virt="non-virtual">argparser::varg_intf</basecompoundref>
    <includes refid="varg_8h" local="no">varg.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classargparser_1_1varg_1a006c701a61cab11343c3aa2ff215937f" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T argparser::varg&lt; T &gt;::flagSetValue</definition>
        <argsstring></argsstring>
        <name>flagSetValue</name>
        <briefdescription>
<para>Value to set when flag key value is found. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/varg.h" line="45" column="21" bodyfile="varg/inc/varg.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classargparser_1_1varg_1a8e39b497a1b40ad92d54e41d4a98a173" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T argparser::varg&lt; T &gt;::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
<para>Current saved value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/varg.h" line="105" column="17" bodyfile="varg/inc/varg.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classargparser_1_1varg_1acdad4dd3a95652611d95d561bfe31799" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="varg__intf_8h_1a0bc71769ac6cba8f1babc54727a490d9" kindref="member">valueParseStatus_e</ref></type>
        <definition>valueParseStatus_e argparser::varg&lt; T &gt;::setCharValue</definition>
        <argsstring>(const char *newValue)</argsstring>
        <name>setCharValue</name>
        <param>
          <type>const char *</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
<para>Set the New character object value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newValue</parametername>
</parameternamelist>
<parameterdescription>
<para>- input argument string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parsedValue</parametername>
</parameternamelist>
<parameterdescription>
<para>- parsed character value if parsing succeeded</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_SUCCESS_e - if value was successsfully set </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_INVALID_INPUT_e - if input string could not be translated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/varg.h" line="56" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1varg_1af9c235b22e7e2a436b68011a1ff32e85" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="varg__intf_8h_1a0bc71769ac6cba8f1babc54727a490d9" kindref="member">valueParseStatus_e</ref></type>
        <definition>valueParseStatus_e argparser::varg&lt; T &gt;::setBoolValue</definition>
        <argsstring>(const char *newValue)</argsstring>
        <name>setBoolValue</name>
        <param>
          <type>const char *</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
<para>Set the Bool Value object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newValue</parametername>
</parameternamelist>
<parameterdescription>
<para>- input argument string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_SUCCESS_e - if value was successsfully set </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_INVALID_INPUT_e - if input string could not be translated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/varg.h" line="66" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1varg_1ae37994e1fdd2033419296cdd084eaa9c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="varg__intf_8h_1a0bc71769ac6cba8f1babc54727a490d9" kindref="member">valueParseStatus_e</ref></type>
        <definition>valueParseStatus_e argparser::varg&lt; T &gt;::setSignedValue</definition>
        <argsstring>(const char *newValue)</argsstring>
        <name>setSignedValue</name>
        <param>
          <type>const char *</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
<para>Set the Signed Value object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newValue</parametername>
</parameternamelist>
<parameterdescription>
<para>- input argument string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_SUCCESS_e - if value was successsfully set </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_INVALID_INPUT_e - if input string could not be translated </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_LOW_e - if value was below the lower set limit </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_HIGH_e - if value was above the upper set limit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/varg.h" line="78" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1varg_1a3fff3f657729c8a4604d28982ab2dca0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="varg__intf_8h_1a0bc71769ac6cba8f1babc54727a490d9" kindref="member">valueParseStatus_e</ref></type>
        <definition>valueParseStatus_e argparser::varg&lt; T &gt;::setUnsignedValue</definition>
        <argsstring>(const char *newValue)</argsstring>
        <name>setUnsignedValue</name>
        <param>
          <type>const char *</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
<para>Set the Unsigned Value object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newValue</parametername>
</parameternamelist>
<parameterdescription>
<para>- input argument string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_SUCCESS_e - if value was successsfully set </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_INVALID_INPUT_e - if input string could not be translated </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_LOW_e - if value was below the lower set limit </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_HIGH_e - if value was above the upper set limit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/varg.h" line="90" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1varg_1aa31cac04643583ff62e7a23e4f163640" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="varg__intf_8h_1a0bc71769ac6cba8f1babc54727a490d9" kindref="member">valueParseStatus_e</ref></type>
        <definition>valueParseStatus_e argparser::varg&lt; T &gt;::setDoubleValue</definition>
        <argsstring>(const char *newValue)</argsstring>
        <name>setDoubleValue</name>
        <param>
          <type>const char *</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
<para>Set the Double Value object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newValue</parametername>
</parameternamelist>
<parameterdescription>
<para>- input argument string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_SUCCESS_e - if value was successsfully set </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_INVALID_INPUT_e - if input string could not be translated </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_LOW_e - if value was below the lower set limit </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_HIGH_e - if value was above the upper set limit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/varg.h" line="102" column="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classargparser_1_1varg_1a41fdedf63f12307127baa8a01eacea02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>argparser::varg&lt; T &gt;::varg</definition>
        <argsstring>(T defaultValue)</argsstring>
        <name>varg</name>
        <param>
          <type>T</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classargparser_1_1varg__intf" kindref="compound">varg_intf</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>- Initial value of <ref refid="classargparser_1_1varg_1a8e39b497a1b40ad92d54e41d4a98a173" kindref="member">varg.value</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/varg.h" line="112" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1varg_1a54ac52721e61658f816bbd1b308e54aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>argparser::varg&lt; T &gt;::varg</definition>
        <argsstring>(T defaultValue, T flagValue)</argsstring>
        <name>varg</name>
        <param>
          <type>T</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>T</type>
          <declname>flagValue</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classargparser_1_1varg__intf" kindref="compound">varg_intf</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>- Initial value of <ref refid="classargparser_1_1varg_1a8e39b497a1b40ad92d54e41d4a98a173" kindref="member">varg.value</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flagValue</parametername>
</parameternamelist>
<parameterdescription>
<para>- Flag set value of <ref refid="classargparser_1_1varg_1a8e39b497a1b40ad92d54e41d4a98a173" kindref="member">varg.value</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/varg.h" line="120" column="9" bodyfile="varg/inc/varg.h" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1varg_1a9e17e3d5e37ad94286ac65e404ccc6e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>argparser::varg&lt; T &gt;::varg</definition>
        <argsstring>(T defaultValue, T min, T max)</argsstring>
        <name>varg</name>
        <param>
          <type>T</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>T</type>
          <declname>min</declname>
        </param>
        <param>
          <type>T</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classargparser_1_1varg__intf" kindref="compound">varg_intf</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>- Initial value of <ref refid="classargparser_1_1varg_1a8e39b497a1b40ad92d54e41d4a98a173" kindref="member">varg.value</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>- Minimum allowed set value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>- Maximum allowed set value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/varg.h" line="129" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1varg_1a473b20c8ae8645086865ccf102823aaa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual argparser::varg&lt; T &gt;::~varg</definition>
        <argsstring>()</argsstring>
        <name>~varg</name>
        <briefdescription>
<para>Destroy the varg object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/varg.h" line="134" column="17" bodyfile="varg/inc/varg.h" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1varg_1a782623f5709b13de778d5573b65babaa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool argparser::varg&lt; T &gt;::isList</definition>
        <argsstring>() const</argsstring>
        <name>isList</name>
        <reimplements refid="classargparser_1_1varg__intf_1a38a21bf04c0171dc7d3f0867f4cb58c2">isList</reimplements>
        <briefdescription>
<para>Return if varg is a list of elements or a single element type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true - List type variable, multiple arguement values are allowed </para>
</simplesect>
<simplesect kind="return"><para>false - Only 0 or 1 argument values are allowed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/varg.h" line="142" column="23" bodyfile="varg/inc/varg.h" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1varg_1a343b0fd604ca370b0af0bc583a28365d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="varg__intf_8h_1a0bc71769ac6cba8f1babc54727a490d9" kindref="member">valueParseStatus_e</ref></type>
        <definition>virtual valueParseStatus_e argparser::varg&lt; T &gt;::setValue</definition>
        <argsstring>(const char *newValue)</argsstring>
        <name>setValue</name>
        <reimplements refid="classargparser_1_1varg__intf_1aff51aa5494f71b180b34b53daa4f80cd">setValue</reimplements>
        <param>
          <type>const char *</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
<para>Virtual interface method implementation for the template variable implementation setValue with input function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newValue</parametername>
</parameternamelist>
<parameterdescription>
<para>- Input character string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_SUCCESS_e - if value was successsfully set </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_INVALID_INPUT_e - if input string could not be translated </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_LOW_e - if value exceeds lower value limit </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_HIGH_e - if value exceeds upper value limit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/varg.h" line="154" column="36"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1varg_1ad8a0e0438e3442c9458bdf12e65929f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="varg__intf_8h_1a0bc71769ac6cba8f1babc54727a490d9" kindref="member">valueParseStatus_e</ref></type>
        <definition>virtual valueParseStatus_e argparser::varg&lt; T &gt;::setValue</definition>
        <argsstring>()</argsstring>
        <name>setValue</name>
        <reimplements refid="classargparser_1_1varg__intf_1afff5b621a9f94f5a8a2f59971e66425f">setValue</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual interface method implementation for the template variable implementation setValue function</para>
<para><simplesect kind="return"><para>valueParseStatus_e::PARSE_SUCCESS_e </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/varg.h" line="161" column="36"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1varg_1ad0145640c4b96084ac5eae9fac9043f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool argparser::varg&lt; T &gt;::isEmpty</definition>
        <argsstring>()</argsstring>
        <name>isEmpty</name>
        <reimplements refid="classargparser_1_1varg__intf_1aaa74f4bf7c2de32faf2276db08f90d4d">isEmpty</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual interface method implementation for the template variable implementation isEmpty function</para>
<para><simplesect kind="return"><para>true - Base variable is never empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/varg.h" line="168" column="22" bodyfile="varg/inc/varg.h" bodystart="168" bodyend="168"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Variable argument type template class. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>argparser::varg&lt; T &gt;</label>
        <link refid="classargparser_1_1varg"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>argparser::varg_intf</label>
        <link refid="classargparser_1_1varg__intf"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>argparser::varg&lt; T &gt;</label>
        <link refid="classargparser_1_1varg"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>argparser::varg_intf</label>
        <link refid="classargparser_1_1varg__intf"/>
      </node>
    </collaborationgraph>
    <location file="varg/inc/varg.h" line="42" column="12" bodyfile="varg/inc/varg.h" bodystart="43" bodyend="169"/>
    <listofallmembers>
      <member refid="classargparser_1_1varg_1a006c701a61cab11343c3aa2ff215937f" prot="private" virt="non-virtual"><scope>argparser::varg</scope><name>flagSetValue</name></member>
      <member refid="classargparser_1_1varg__intf_1a0a293afbb6c6a010cb7a46c7cb53a39d" prot="protected" virt="non-virtual"><scope>argparser::varg</scope><name>getBoolValue</name></member>
      <member refid="classargparser_1_1varg__intf_1ae0070fd1bdf19a3cfb0de7dea2d3a8e9" prot="protected" virt="non-virtual"><scope>argparser::varg</scope><name>getCharValue</name></member>
      <member refid="classargparser_1_1varg__intf_1a0db1d5c7509997b4deb05353bf1faa97" prot="protected" virt="non-virtual"><scope>argparser::varg</scope><name>getDoubleValue</name></member>
      <member refid="classargparser_1_1varg__intf_1a9c0883da18d87e5eb6ea7a5d3df70eee" prot="protected" virt="non-virtual"><scope>argparser::varg</scope><name>getSignedValue</name></member>
      <member refid="classargparser_1_1varg__intf_1a4c2423cfa709debc96d4ce0fdcb748c9" prot="public" virt="virtual"><scope>argparser::varg</scope><name>getTypeString</name></member>
      <member refid="classargparser_1_1varg__intf_1a3c0e994cb881d352dc9c0eda49d8be39" prot="protected" virt="non-virtual"><scope>argparser::varg</scope><name>getUnsignedValue</name></member>
      <member refid="classargparser_1_1varg_1ad0145640c4b96084ac5eae9fac9043f2" prot="public" virt="virtual"><scope>argparser::varg</scope><name>isEmpty</name></member>
      <member refid="classargparser_1_1varg_1a782623f5709b13de778d5573b65babaa" prot="public" virt="virtual"><scope>argparser::varg</scope><name>isList</name></member>
      <member refid="classargparser_1_1varg__intf_1a2d0d081fb21d75575c4920f8b3382843" prot="public" virt="non-virtual"><scope>argparser::varg</scope><name>operator=</name></member>
      <member refid="classargparser_1_1varg__intf_1ad9595510b842d0246a66df427d3429fd" prot="public" virt="non-virtual"><scope>argparser::varg</scope><name>operator=</name></member>
      <member refid="classargparser_1_1varg_1af9c235b22e7e2a436b68011a1ff32e85" prot="private" virt="non-virtual"><scope>argparser::varg</scope><name>setBoolValue</name></member>
      <member refid="classargparser_1_1varg_1acdad4dd3a95652611d95d561bfe31799" prot="private" virt="non-virtual"><scope>argparser::varg</scope><name>setCharValue</name></member>
      <member refid="classargparser_1_1varg_1aa31cac04643583ff62e7a23e4f163640" prot="private" virt="non-virtual"><scope>argparser::varg</scope><name>setDoubleValue</name></member>
      <member refid="classargparser_1_1varg__intf_1ad18a930df13f705c25f23679778312ea" prot="protected" virt="non-virtual"><scope>argparser::varg</scope><name>setMinMaxDouble</name></member>
      <member refid="classargparser_1_1varg__intf_1aa6c337f5c1ee140a0972fb3d4dcfb3e8" prot="protected" virt="non-virtual"><scope>argparser::varg</scope><name>setMinMaxSigned</name></member>
      <member refid="classargparser_1_1varg__intf_1a705a9c247bfdbb1f9ca553ac276d9af5" prot="protected" virt="non-virtual"><scope>argparser::varg</scope><name>setMinMaxUnsigned</name></member>
      <member refid="classargparser_1_1varg_1ae37994e1fdd2033419296cdd084eaa9c" prot="private" virt="non-virtual"><scope>argparser::varg</scope><name>setSignedValue</name></member>
      <member refid="classargparser_1_1varg__intf_1a311cf94678e263ed69ede356d6d99c29" prot="protected" virt="non-virtual"><scope>argparser::varg</scope><name>setTypeString</name></member>
      <member refid="classargparser_1_1varg_1a3fff3f657729c8a4604d28982ab2dca0" prot="private" virt="non-virtual"><scope>argparser::varg</scope><name>setUnsignedValue</name></member>
      <member refid="classargparser_1_1varg_1a343b0fd604ca370b0af0bc583a28365d" prot="public" virt="virtual"><scope>argparser::varg</scope><name>setValue</name></member>
      <member refid="classargparser_1_1varg_1ad8a0e0438e3442c9458bdf12e65929f0" prot="public" virt="virtual"><scope>argparser::varg</scope><name>setValue</name></member>
      <member refid="classargparser_1_1varg_1a8e39b497a1b40ad92d54e41d4a98a173" prot="public" virt="non-virtual"><scope>argparser::varg</scope><name>value</name></member>
      <member refid="classargparser_1_1varg_1a41fdedf63f12307127baa8a01eacea02" prot="public" virt="non-virtual"><scope>argparser::varg</scope><name>varg</name></member>
      <member refid="classargparser_1_1varg_1a54ac52721e61658f816bbd1b308e54aa" prot="public" virt="non-virtual"><scope>argparser::varg</scope><name>varg</name></member>
      <member refid="classargparser_1_1varg_1a9e17e3d5e37ad94286ac65e404ccc6e3" prot="public" virt="non-virtual"><scope>argparser::varg</scope><name>varg</name></member>
      <member refid="classargparser_1_1varg__intf_1ae0ff8b571b93bd20d7be35844a2b18d3" prot="public" virt="non-virtual"><scope>argparser::varg</scope><name>varg_intf</name></member>
      <member refid="classargparser_1_1varg__intf_1ac80d23cc8ce2f7abdcb7bbc8de090a35" prot="public" virt="non-virtual"><scope>argparser::varg</scope><name>varg_intf</name></member>
      <member refid="classargparser_1_1varg__intf_1a22027194048defd3d6940ac3818e86c2" prot="public" virt="non-virtual"><scope>argparser::varg</scope><name>varg_intf</name></member>
      <member refid="classargparser_1_1varg_1a473b20c8ae8645086865ccf102823aaa" prot="public" virt="virtual"><scope>argparser::varg</scope><name>~varg</name></member>
      <member refid="classargparser_1_1varg__intf_1a73e3f6024948cbb35f43822759437fd5" prot="public" virt="virtual"><scope>argparser::varg</scope><name>~varg_intf</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
