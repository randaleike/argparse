<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classargparser_1_1listvarg" kind="class" language="C++" prot="public">
    <compoundname>argparser::listvarg</compoundname>
    <basecompoundref refid="classargparser_1_1varg__intf" prot="public" virt="non-virtual">argparser::varg_intf</basecompoundref>
    <includes refid="listvarg_8h" local="no">listvarg.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classargparser_1_1listvarg_1ac565299a3e7ed44f818dd24ceb7b7ff4" prot="public" static="no" mutable="no">
        <type>std::list&lt; T &gt;</type>
        <definition>std::list&lt; T &gt; argparser::listvarg&lt; T &gt;::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
<para>Current saved list values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/listvarg.h" line="117" column="20" bodyfile="varg/inc/listvarg.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classargparser_1_1listvarg_1aad3cba443650311171bfe867e35a3f65" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="varg__intf_8h_1a0bc71769ac6cba8f1babc54727a490d9" kindref="member">valueParseStatus_e</ref></type>
        <definition>valueParseStatus_e argparser::listvarg&lt; T &gt;::setSignedElementValue</definition>
        <argsstring>(const char *newValue)</argsstring>
        <name>setSignedElementValue</name>
        <param>
          <type>const char *</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
<para>Set the value of a signed element and add the new element to the value list object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newValue</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the text value string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_SUCCESS_e - if value was successsfully set </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_INVALID_INPUT_e - if input string could not be translated </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_LOW_e - if value exceeds lower value limit </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_HIGH_e - if value exceeds upper value limit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/listvarg.h" line="56" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1listvarg_1aea382f76fc22b8e481ad1ef84640dad4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="varg__intf_8h_1a0bc71769ac6cba8f1babc54727a490d9" kindref="member">valueParseStatus_e</ref></type>
        <definition>valueParseStatus_e argparser::listvarg&lt; T &gt;::setUnsignedElementValue</definition>
        <argsstring>(const char *newValue)</argsstring>
        <name>setUnsignedElementValue</name>
        <param>
          <type>const char *</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
<para>Set the value of an unsigned list element and add the new element to the value list object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newValue</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the text value string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_SUCCESS_e - if value was successsfully set </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_INVALID_INPUT_e - if input string could not be translated </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_LOW_e - if value exceeds lower value limit </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_HIGH_e - if value exceeds upper value limit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/listvarg.h" line="68" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1listvarg_1a5f385e1ea883323fb87c47a6981c7704" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="varg__intf_8h_1a0bc71769ac6cba8f1babc54727a490d9" kindref="member">valueParseStatus_e</ref></type>
        <definition>valueParseStatus_e argparser::listvarg&lt; T &gt;::setDoubleElementValue</definition>
        <argsstring>(const char *newValue)</argsstring>
        <name>setDoubleElementValue</name>
        <param>
          <type>const char *</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
<para>Set the value of a double list element and add the new element to the value list object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newValue</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the text value string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_SUCCESS_e - if value was successsfully set </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_INVALID_INPUT_e - if input string could not be translated </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_LOW_e - if value exceeds lower value limit </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_HIGH_e - if value exceeds upper value limit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/listvarg.h" line="80" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1listvarg_1a8becbcd21da703743ed8e07eda878693" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="varg__intf_8h_1a0bc71769ac6cba8f1babc54727a490d9" kindref="member">valueParseStatus_e</ref></type>
        <definition>valueParseStatus_e argparser::listvarg&lt; T &gt;::setBoolElementValue</definition>
        <argsstring>(const char *newValue)</argsstring>
        <name>setBoolElementValue</name>
        <param>
          <type>const char *</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
<para>Set the value of a boolean element and add the new element to the value list object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newValue</parametername>
</parameternamelist>
<parameterdescription>
<para>- input argument string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_SUCCESS_e - if value was successsfully set </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_INVALID_INPUT_e - if input string could not be translated </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_LOW_e - if value exceeds lower value limit </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_HIGH_e - if value exceeds upper value limit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/listvarg.h" line="92" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1listvarg_1a6fc4b65bee1f54ba8ff3e705e9ec4dbe" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="varg__intf_8h_1a0bc71769ac6cba8f1babc54727a490d9" kindref="member">valueParseStatus_e</ref></type>
        <definition>valueParseStatus_e argparser::listvarg&lt; T &gt;::setCharElementValue</definition>
        <argsstring>(const char *newValue)</argsstring>
        <name>setCharElementValue</name>
        <param>
          <type>const char *</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
<para>Set the Element Value object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newValue</parametername>
</parameternamelist>
<parameterdescription>
<para>- input argument string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_SUCCESS_e - if value was successsfully set </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_INVALID_INPUT_e - if input string could not be translated </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_LOW_e - if value exceeds lower value limit </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_HIGH_e - if value exceeds upper value limit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/listvarg.h" line="104" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1listvarg_1ac3f14953d33fbccedef8d28834271a09" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="varg__intf_8h_1a0bc71769ac6cba8f1babc54727a490d9" kindref="member">valueParseStatus_e</ref></type>
        <definition>valueParseStatus_e argparser::listvarg&lt; T &gt;::setStringElementValue</definition>
        <argsstring>(const char *newValue)</argsstring>
        <name>setStringElementValue</name>
        <param>
          <type>const char *</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
<para>Set the value of a string element and add the new element to the value list object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newValue</parametername>
</parameternamelist>
<parameterdescription>
<para>- input argument string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_SUCCESS_e - if value was successsfully set </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_INVALID_INPUT_e - if input string could not be translated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/listvarg.h" line="114" column="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classargparser_1_1listvarg_1a1a4f60ffd498674c5d5b45c5683aeaa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>argparser::listvarg&lt; T &gt;::listvarg</definition>
        <argsstring>()</argsstring>
        <name>listvarg</name>
        <briefdescription>
<para>Construct a <ref refid="classargparser_1_1varg__intf" kindref="compound">varg_intf</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/listvarg.h" line="122" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1listvarg_1a1b9659de7099f4f64f8f07f389fac318" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual argparser::listvarg&lt; T &gt;::~listvarg</definition>
        <argsstring>()</argsstring>
        <name>~listvarg</name>
        <briefdescription>
<para>Destroy the varg object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/listvarg.h" line="127" column="17" bodyfile="varg/inc/listvarg.h" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1listvarg_1a0034885a73bf516de9cf72662ef5bb20" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool argparser::listvarg&lt; T &gt;::isList</definition>
        <argsstring>() const</argsstring>
        <name>isList</name>
        <reimplements refid="classargparser_1_1varg__intf_1a38a21bf04c0171dc7d3f0867f4cb58c2">isList</reimplements>
        <briefdescription>
<para>Return if varg is a list of elements or a single element type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true - List type variable, multiple arguement values are allowed </para>
</simplesect>
<simplesect kind="return"><para>false - Only 0 or 1 argument values are allowed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/listvarg.h" line="135" column="22" bodyfile="varg/inc/listvarg.h" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1listvarg_1a5ebc28913e6598b67ebef3960bafbf08" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="varg__intf_8h_1a0bc71769ac6cba8f1babc54727a490d9" kindref="member">valueParseStatus_e</ref></type>
        <definition>virtual valueParseStatus_e argparser::listvarg&lt; T &gt;::setValue</definition>
        <argsstring>(const char *newValue)</argsstring>
        <name>setValue</name>
        <reimplements refid="classargparser_1_1varg__intf_1aff51aa5494f71b180b34b53daa4f80cd">setValue</reimplements>
        <param>
          <type>const char *</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
<para>Virtual interface method implementation for the template variable implementation setValue with input function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newValue</parametername>
</parameternamelist>
<parameterdescription>
<para>- Input character string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_SUCCESS_e - if value was successsfully set </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_INVALID_INPUT_e - if input string could not be translated </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_LOW_e - if value exceeds lower value limit </para>
</simplesect>
<simplesect kind="return"><para>valueParseStatus_e::PARSE_BOUNDARY_HIGH_e - if value exceeds upper value limit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/listvarg.h" line="147" column="36"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1listvarg_1ae6414065eddd88cb2d7871ab47a6d024" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="varg__intf_8h_1a0bc71769ac6cba8f1babc54727a490d9" kindref="member">valueParseStatus_e</ref></type>
        <definition>virtual valueParseStatus_e argparser::listvarg&lt; T &gt;::setValue</definition>
        <argsstring>()</argsstring>
        <name>setValue</name>
        <reimplements refid="classargparser_1_1varg__intf_1afff5b621a9f94f5a8a2f59971e66425f">setValue</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual interface method implementation for the template variable implementation setValue function</para>
<para><simplesect kind="return"><para>valueParseStatus_e::PARSE_INVALID_INPUT_e - Lists do not have a default set value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/listvarg.h" line="154" column="36" bodyfile="varg/inc/listvarg.h" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classargparser_1_1listvarg_1a0198566f31aff0af72f62d1604dc8201" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool argparser::listvarg&lt; T &gt;::isEmpty</definition>
        <argsstring>()</argsstring>
        <name>isEmpty</name>
        <reimplements refid="classargparser_1_1varg__intf_1aaa74f4bf7c2de32faf2276db08f90d4d">isEmpty</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual interface method implementation for the template variable implementation isEmpty function</para>
<para><simplesect kind="return"><para>true - if the list is empty </para>
</simplesect>
<simplesect kind="return"><para>false - if list is not empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="varg/inc/listvarg.h" line="162" column="22" bodyfile="varg/inc/listvarg.h" bodystart="162" bodyend="162"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Variable list argument type template class. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>argparser::varg_intf</label>
        <link refid="classargparser_1_1varg__intf"/>
      </node>
      <node id="1">
        <label>argparser::listvarg&lt; T &gt;</label>
        <link refid="classargparser_1_1listvarg"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>argparser::varg_intf</label>
        <link refid="classargparser_1_1varg__intf"/>
      </node>
      <node id="1">
        <label>argparser::listvarg&lt; T &gt;</label>
        <link refid="classargparser_1_1listvarg"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="varg/inc/listvarg.h" line="43" column="12" bodyfile="varg/inc/listvarg.h" bodystart="44" bodyend="163"/>
    <listofallmembers>
      <member refid="classargparser_1_1varg__intf_1a0a293afbb6c6a010cb7a46c7cb53a39d" prot="protected" virt="non-virtual"><scope>argparser::listvarg</scope><name>getBoolValue</name></member>
      <member refid="classargparser_1_1varg__intf_1ae0070fd1bdf19a3cfb0de7dea2d3a8e9" prot="protected" virt="non-virtual"><scope>argparser::listvarg</scope><name>getCharValue</name></member>
      <member refid="classargparser_1_1varg__intf_1a0db1d5c7509997b4deb05353bf1faa97" prot="protected" virt="non-virtual"><scope>argparser::listvarg</scope><name>getDoubleValue</name></member>
      <member refid="classargparser_1_1varg__intf_1a9c0883da18d87e5eb6ea7a5d3df70eee" prot="protected" virt="non-virtual"><scope>argparser::listvarg</scope><name>getSignedValue</name></member>
      <member refid="classargparser_1_1varg__intf_1a4c2423cfa709debc96d4ce0fdcb748c9" prot="public" virt="virtual"><scope>argparser::listvarg</scope><name>getTypeString</name></member>
      <member refid="classargparser_1_1varg__intf_1a3c0e994cb881d352dc9c0eda49d8be39" prot="protected" virt="non-virtual"><scope>argparser::listvarg</scope><name>getUnsignedValue</name></member>
      <member refid="classargparser_1_1listvarg_1a0198566f31aff0af72f62d1604dc8201" prot="public" virt="virtual"><scope>argparser::listvarg</scope><name>isEmpty</name></member>
      <member refid="classargparser_1_1listvarg_1a0034885a73bf516de9cf72662ef5bb20" prot="public" virt="virtual"><scope>argparser::listvarg</scope><name>isList</name></member>
      <member refid="classargparser_1_1listvarg_1a1a4f60ffd498674c5d5b45c5683aeaa6" prot="public" virt="non-virtual"><scope>argparser::listvarg</scope><name>listvarg</name></member>
      <member refid="classargparser_1_1varg__intf_1a2d0d081fb21d75575c4920f8b3382843" prot="public" virt="non-virtual"><scope>argparser::listvarg</scope><name>operator=</name></member>
      <member refid="classargparser_1_1varg__intf_1ad9595510b842d0246a66df427d3429fd" prot="public" virt="non-virtual"><scope>argparser::listvarg</scope><name>operator=</name></member>
      <member refid="classargparser_1_1listvarg_1a8becbcd21da703743ed8e07eda878693" prot="protected" virt="non-virtual"><scope>argparser::listvarg</scope><name>setBoolElementValue</name></member>
      <member refid="classargparser_1_1listvarg_1a6fc4b65bee1f54ba8ff3e705e9ec4dbe" prot="protected" virt="non-virtual"><scope>argparser::listvarg</scope><name>setCharElementValue</name></member>
      <member refid="classargparser_1_1listvarg_1a5f385e1ea883323fb87c47a6981c7704" prot="protected" virt="non-virtual"><scope>argparser::listvarg</scope><name>setDoubleElementValue</name></member>
      <member refid="classargparser_1_1varg__intf_1ad18a930df13f705c25f23679778312ea" prot="protected" virt="non-virtual"><scope>argparser::listvarg</scope><name>setMinMaxDouble</name></member>
      <member refid="classargparser_1_1varg__intf_1aa6c337f5c1ee140a0972fb3d4dcfb3e8" prot="protected" virt="non-virtual"><scope>argparser::listvarg</scope><name>setMinMaxSigned</name></member>
      <member refid="classargparser_1_1varg__intf_1a705a9c247bfdbb1f9ca553ac276d9af5" prot="protected" virt="non-virtual"><scope>argparser::listvarg</scope><name>setMinMaxUnsigned</name></member>
      <member refid="classargparser_1_1listvarg_1aad3cba443650311171bfe867e35a3f65" prot="protected" virt="non-virtual"><scope>argparser::listvarg</scope><name>setSignedElementValue</name></member>
      <member refid="classargparser_1_1listvarg_1ac3f14953d33fbccedef8d28834271a09" prot="protected" virt="non-virtual"><scope>argparser::listvarg</scope><name>setStringElementValue</name></member>
      <member refid="classargparser_1_1varg__intf_1a311cf94678e263ed69ede356d6d99c29" prot="protected" virt="non-virtual"><scope>argparser::listvarg</scope><name>setTypeString</name></member>
      <member refid="classargparser_1_1listvarg_1aea382f76fc22b8e481ad1ef84640dad4" prot="protected" virt="non-virtual"><scope>argparser::listvarg</scope><name>setUnsignedElementValue</name></member>
      <member refid="classargparser_1_1listvarg_1a5ebc28913e6598b67ebef3960bafbf08" prot="public" virt="virtual"><scope>argparser::listvarg</scope><name>setValue</name></member>
      <member refid="classargparser_1_1listvarg_1ae6414065eddd88cb2d7871ab47a6d024" prot="public" virt="virtual"><scope>argparser::listvarg</scope><name>setValue</name></member>
      <member refid="classargparser_1_1listvarg_1ac565299a3e7ed44f818dd24ceb7b7ff4" prot="public" virt="non-virtual"><scope>argparser::listvarg</scope><name>value</name></member>
      <member refid="classargparser_1_1varg__intf_1ae0ff8b571b93bd20d7be35844a2b18d3" prot="public" virt="non-virtual"><scope>argparser::listvarg</scope><name>varg_intf</name></member>
      <member refid="classargparser_1_1varg__intf_1ac80d23cc8ce2f7abdcb7bbc8de090a35" prot="public" virt="non-virtual"><scope>argparser::listvarg</scope><name>varg_intf</name></member>
      <member refid="classargparser_1_1varg__intf_1a22027194048defd3d6940ac3818e86c2" prot="public" virt="non-virtual"><scope>argparser::listvarg</scope><name>varg_intf</name></member>
      <member refid="classargparser_1_1listvarg_1a1b9659de7099f4f64f8f07f389fac318" prot="public" virt="virtual"><scope>argparser::listvarg</scope><name>~listvarg</name></member>
      <member refid="classargparser_1_1varg__intf_1a73e3f6024948cbb35f43822759437fd5" prot="public" virt="virtual"><scope>argparser::listvarg</scope><name>~varg_intf</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
