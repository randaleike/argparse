.TH "argparser::cmd_line_parse" 3 "Sat Sep 14 2024" "Version 0.9.2.0" "argparse" \" -*- nroff -*-
.ad l
.nh
.SH NAME
argparser::cmd_line_parse \- Class definition\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <cmd_line_parse\&.h>\fP
.PP
Inherits parser_base\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBcmd_line_parse\fP ()"
.br
.RI "default Constructor "
.ti -1c
.RI "\fBcmd_line_parse\fP (const \fBcmd_line_parse\fP &other)"
.br
.RI "Copy Constructor\&. "
.ti -1c
.RI "\fBcmd_line_parse\fP (\fBcmd_line_parse\fP &&other)"
.br
.RI "Reference Copy Constructor\&. "
.ti -1c
.RI "\fBcmd_line_parse\fP (parserstr &usage, parserstr &description, bool abortOnError=false, bool disableDefaultHelp=false, int debugLevel=debugVerbosityLevel_e::noDebugMsg)"
.br
.RI "Constructor with input\&. "
.ti -1c
.RI "\fBcmd_line_parse\fP (const char *usage, const char *description, bool abortOnError=false, bool disableDefaultHelp=false, int debugLevel=debugVerbosityLevel_e::noDebugMsg)"
.br
.RI "Constructor with input\&. "
.ti -1c
.RI "\fBcmd_line_parse\fP & \fBoperator=\fP (const \fBcmd_line_parse\fP &other)"
.br
.RI "Copy Assignment Constructor\&. "
.ti -1c
.RI "\fBcmd_line_parse\fP & \fBoperator=\fP (\fBcmd_line_parse\fP &&other)"
.br
.RI "Reference Copy Assignment Constructor\&. "
.ti -1c
.RI "\fB~cmd_line_parse\fP ()=default"
.br
.RI "Destructor\&. "
.ti -1c
.RI "void \fBsetEpilog\fP (parserstr epilog)"
.br
.RI "Set the Epilog text\&. "
.ti -1c
.RI "void \fBsetProgramName\fP (parserstr progName)"
.br
.RI "Set the Program Name for the usage string using a string as input\&. "
.ti -1c
.RI "void \fBsetProgramName\fP (char *progName)"
.br
.RI "Set the Program Name for the usage string using char* as input\&. "
.ti -1c
.RI "void \fBsetKeyPrefix\fP (parserstr prefix)"
.br
.RI "Set the argument key prefix value using string input\&. "
.ti -1c
.RI "void \fBsetKeyPrefix\fP (char *prefix)"
.br
.RI "Set the argument key prefix value using char* input\&. "
.ti -1c
.RI "void \fBdisableDefaultHelpArgument\fP ()"
.br
.RI "Disable the default help argument setup\&. "
.ti -1c
.RI "void \fBdisableHelpDisplayOnError\fP ()"
.br
.RI "Disable the help display on parsing error\&. "
.ti -1c
.RI "void \fBdisableSingleCharListArgument\fP ()"
.br
.RI "Disable the single character list input argument parsing\&. "
.ti -1c
.RI "void \fBenableUnknowArgumentIgnore\fP ()"
.br
.RI "Enable flag to ignore unknown arguments, default is to generate an error if an unknown argument is found\&. "
.ti -1c
.RI "void \fBaddKeyArgument\fP (\fBvarg_intf\fP *arg, parserstr name, parserstr argKeys, parserstr helpText, int nargs=1, bool required=false)"
.br
.RI "Add a new key based command line argument to the argument list\&. "
.ti -1c
.RI "void \fBaddFlagArgument\fP (\fBvarg_intf\fP *arg, parserstr name, parserstr argKeys, parserstr helpText, bool required=false)"
.br
.RI "Add a new key based flag command line argument to the argument list\&. "
.ti -1c
.RI "void \fBaddPositionalArgument\fP (\fBvarg_intf\fP *arg, parserstr name, parserstr helpText, int nargs=1, bool required=false)"
.br
.RI "Add a new positinal based command line argument to the argument list\&. "
.ti -1c
.RI "void \fBsetPositionalNameStop\fP (const char *positionalArgumentName)"
.br
.RI "Set the name of the positional argument to stop parsing\&. "
.ti -1c
.RI "int \fBparse\fP (int argc, char *argv[], int startingArgIndex=1, int endingArgIndex=\-1)"
.br
.RI "Parse the input command line arguments\&. "
.ti -1c
.RI "void \fBdisplayOptionHelp\fP (std::ostream &outStream=std::cerr)"
.br
.RI "Print the formatted option help message to the input stream\&. "
.ti -1c
.RI "void \fBdisplayPositionHelp\fP (std::ostream &outStream=std::cerr)"
.br
.RI "Print the formatted environment help message to the input stream\&. "
.ti -1c
.RI "void \fBdisplayHelp\fP (std::ostream &outStream=std::cerr)"
.br
.RI "Print the formatted help message to the input stream\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBparseKeyArg\fP ()"
.br
.RI "Parse the input key argument type and update the parsing state data\&. "
.ti -1c
.RI "void \fBparsePositionalArg\fP ()"
.br
.RI "Parse the input positional argument type and update the parsing state data\&. "
.in -1c
.SH "Detailed Description"
.PP 
Class definition\&. 

Detailed class description 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "argparser::cmd_line_parse::cmd_line_parse (const \fBcmd_line_parse\fP & other)"

.PP
Copy Constructor\&. 
.PP
\fBParameters\fP
.RS 4
\fIother\fP - Source object for the copy 
.RE
.PP

.SS "argparser::cmd_line_parse::cmd_line_parse (\fBcmd_line_parse\fP && other)"

.PP
Reference Copy Constructor\&. 
.PP
\fBParameters\fP
.RS 4
\fIother\fP - Source object for the copy 
.RE
.PP

.SS "argparser::cmd_line_parse::cmd_line_parse (parserstr & usage, parserstr & description, bool abortOnError = \fCfalse\fP, bool disableDefaultHelp = \fCfalse\fP, int debugLevel = \fCdebugVerbosityLevel_e::noDebugMsg\fP)"

.PP
Constructor with input\&. 
.PP
\fBParameters\fP
.RS 4
\fIusage\fP - Usage string for the help display 
.br
\fIdescription\fP - Description string for the help display 
.br
\fIabortOnError\fP - True = abort parsing on first error, False (default) = Log error and continue parsing command line data 
.br
\fIdisableDefaultHelp\fP - False (default) = Display help screen if a parsing error occured, True = Disable help display screen 
.br
\fIdebugLevel\fP - Verbosity level of debug messages 0 (default) - Only error messages 4 - Error and informational messages 5+ - Error, informational and flow tracking messages 
.RE
.PP

.SS "argparser::cmd_line_parse::cmd_line_parse (const char * usage, const char * description, bool abortOnError = \fCfalse\fP, bool disableDefaultHelp = \fCfalse\fP, int debugLevel = \fCdebugVerbosityLevel_e::noDebugMsg\fP)"

.PP
Constructor with input\&. 
.PP
\fBParameters\fP
.RS 4
\fIusage\fP - Usage string for the help display 
.br
\fIdescription\fP - Description string for the help display 
.br
\fIabortOnError\fP - True = abort parsing on first error, False (default) = Log error and continue parsing command line data 
.br
\fIdisableDefaultHelp\fP - False (default) = Display help screen if a parsing error occured, True = Disable help display screen 
.br
\fIdebugLevel\fP - Verbosity level of debug messages 0 (default) - Only error messages 4 - Error and informational messages 5+ - Error, informational and flow tracking messages 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void argparser::cmd_line_parse::addFlagArgument (\fBvarg_intf\fP * arg, parserstr name, parserstr argKeys, parserstr helpText, bool required = \fCfalse\fP)"

.PP
Add a new key based flag command line argument to the argument list\&. 
.PP
\fBParameters\fP
.RS 4
\fIarg\fP - Pointer to the defined var argument to fill 
.br
\fIname\fP - Human name used in the help messages 
.br
\fIargKeys\fP - Delimieted list of argument key values 
.br
\fIhelpText\fP - Help text to be printed in the help message 
.br
\fIrequired\fP - True if argument is required, false if arguemnt is optional 
.RE
.PP

.SS "void argparser::cmd_line_parse::addKeyArgument (\fBvarg_intf\fP * arg, parserstr name, parserstr argKeys, parserstr helpText, int nargs = \fC1\fP, bool required = \fCfalse\fP)"

.PP
Add a new key based command line argument to the argument list\&. 
.PP
\fBParameters\fP
.RS 4
\fIarg\fP - Pointer to the defined var argument to fill 
.br
\fIname\fP - Human name used in the help messages 
.br
\fIargKeys\fP - Delimieted list of argument key values 
.br
\fIhelpText\fP - Help text to be printed in the help message 
.br
\fInargs\fP - Number of argument values that follow 0 : Argument is a flag with no following values 1 : Simple argument with a single value N : List argument with exactly N arguments, if less than N arguments are found it is flagged as an error -N : List argument with up to N arguments, if more than N arguments are found it is flagged as an error 
.br
\fIrequired\fP - True if argument is required, false if arguemnt is optional 
.RE
.PP

.SS "void argparser::cmd_line_parse::addPositionalArgument (\fBvarg_intf\fP * arg, parserstr name, parserstr helpText, int nargs = \fC1\fP, bool required = \fCfalse\fP)"

.PP
Add a new positinal based command line argument to the argument list\&. 
.PP
\fBParameters\fP
.RS 4
\fIarg\fP - Pointer to the defined var argument to fill 
.br
\fIname\fP - Name of the argument 
.br
\fIhelpText\fP - Help text to be printed in the help message 
.br
\fInargs\fP - Number of argument values that follow 0 : Argument is a flag with no following values 1 : Simple argument with a single value N : List argument with exactly N arguments, if less than N arguments are found it is flagged as an error -N : List argument with up to N arguments, if more than N arguments are found it is flagged as an error 
.br
\fIrequired\fP - True if argument is required, false if arguemnt is optional 
.RE
.PP

.SS "void argparser::cmd_line_parse::displayHelp (std::ostream & outStream = \fCstd::cerr\fP)"

.PP
Print the formatted help message to the input stream\&. 
.PP
\fBParameters\fP
.RS 4
\fIoutStream\fP - Output streem to use for text output\&. Default is the standard error stream 
.RE
.PP

.SS "void argparser::cmd_line_parse::displayOptionHelp (std::ostream & outStream = \fCstd::cerr\fP)"

.PP
Print the formatted option help message to the input stream\&. 
.PP
\fBParameters\fP
.RS 4
\fIoutStream\fP - Output streem to use for text output\&. Default is the standard error stream 
.RE
.PP

.SS "void argparser::cmd_line_parse::displayPositionHelp (std::ostream & outStream = \fCstd::cerr\fP)"

.PP
Print the formatted environment help message to the input stream\&. 
.PP
\fBParameters\fP
.RS 4
\fIoutStream\fP - Output streem to use for text output\&. Default is the standard error stream 
.RE
.PP

.SS "\fBcmd_line_parse\fP& argparser::cmd_line_parse::operator= (\fBcmd_line_parse\fP && other)"

.PP
Reference Copy Assignment Constructor\&. 
.PP
\fBParameters\fP
.RS 4
\fIother\fP - Source object for the copy 
.RE
.PP

.SS "\fBcmd_line_parse\fP& argparser::cmd_line_parse::operator= (const \fBcmd_line_parse\fP & other)"

.PP
Copy Assignment Constructor\&. 
.PP
\fBParameters\fP
.RS 4
\fIother\fP - Source object for the copy 
.RE
.PP

.SS "int argparser::cmd_line_parse::parse (int argc, char * argv[], int startingArgIndex = \fC1\fP, int endingArgIndex = \fC\-1\fP)"

.PP
Parse the input command line arguments\&. 
.PP
\fBParameters\fP
.RS 4
\fIargc\fP - Number of char pointers in the argv[] array 
.br
\fIargv\fP - Array of command line text entries 
.br
\fIstartingArgIndex\fP - argv index to start parsing arguments 
.br
\fIendingArgIndex\fP - argv index to stop parsing arguments, -1 == argc
.RE
.PP
\fBReturns\fP
.RS 4
int - Index of the last argument parsed or -1 if an error occured 
.RE
.PP

.SS "void argparser::cmd_line_parse::setEpilog (parserstr epilog)\fC [inline]\fP"

.PP
Set the Epilog text\&. 
.PP
\fBParameters\fP
.RS 4
\fIepilog\fP - Text to display at the end of the help block 
.RE
.PP

.SS "void argparser::cmd_line_parse::setKeyPrefix (char * prefix)\fC [inline]\fP"

.PP
Set the argument key prefix value using char* input\&. The argument key prefix is the character or string the identifies an input argument key string\&. Any input argument that does not begin with this character is assumed to be a positional argument value\&.
.PP
\fBParameters\fP
.RS 4
\fIprefix\fP - argument prefix value 
.RE
.PP

.SS "void argparser::cmd_line_parse::setKeyPrefix (parserstr prefix)\fC [inline]\fP"

.PP
Set the argument key prefix value using string input\&. The argument key prefix is the character or string the identifies an input argument key string\&. Any input argument that does not begin with this character is assumed to be a positional argument value\&.
.PP
\fBParameters\fP
.RS 4
\fIprefix\fP - argument prefix value 
.RE
.PP

.SS "void argparser::cmd_line_parse::setPositionalNameStop (const char * positionalArgumentName)"

.PP
Set the name of the positional argument to stop parsing\&. 
.PP
\fBParameters\fP
.RS 4
\fIpositionalArgumentName\fP - Positional name to find 
.RE
.PP

.SS "void argparser::cmd_line_parse::setProgramName (char * progName)\fC [inline]\fP"

.PP
Set the Program Name for the usage string using char* as input\&. 
.PP
\fBParameters\fP
.RS 4
\fIprogName\fP - Program name to use in the usage string 
.RE
.PP

.SS "void argparser::cmd_line_parse::setProgramName (parserstr progName)\fC [inline]\fP"

.PP
Set the Program Name for the usage string using a string as input\&. 
.PP
\fBParameters\fP
.RS 4
\fIprogName\fP - Program name to use in the usage string 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for argparse from the source code\&.
